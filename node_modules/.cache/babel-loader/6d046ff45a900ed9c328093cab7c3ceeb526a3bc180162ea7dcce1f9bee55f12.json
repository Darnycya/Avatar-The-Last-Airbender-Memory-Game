{"ast":null,"code":"var _jsxFileName = \"/Users/darnycya/Desktop/Projects/Avatar-The-Last-Airbender-Memory-Game/src/Components/Board/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, createElement as _createElement } from 'react';\nimport Card from '../Card/Card';\nimport Modal from '../Modal/Modal';\nimport useModal from '../Modal/useModal';\nimport './Board.css';\nimport Appa from '../../Assets/Images/Appa.png';\nimport Katara from '../../Assets/Images/Katara.jpeg';\nimport PrinceZuko from '../../Assets/Images/Prince_Zuko.jpg';\nimport Sokka from '../../Assets/Images/Sokka.png';\nimport Toph from '../../Assets/Images/Toph.jpg';\nimport Aang from '../../Assets/Images/Aang.jpg';\nimport backImg from '../../Assets/Images/Logo.jpg';\nimport Iroh_smiling from '../../Assets/Images/Iroh_smiling.png';\nimport Mai from '../../Assets/Images/Mai.png';\nimport momo from '../../Assets/Images/momo.jpg';\nimport Tylee from '../../Assets/Images/Tylee.png';\nimport Azulaa from '../../Assets/Images/Azulaa.png';\nimport Bumi from '../../Assets/Images/Bumi.jpeg';\n\n// Function to build the cards\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst buildCards = () => {\n  let id = 0;\n  const images = {\n    Aang,\n    Appa,\n    Katara,\n    PrinceZuko,\n    Sokka,\n    Toph,\n    Iroh_smiling,\n    Mai,\n    momo,\n    Tylee,\n    Azulaa,\n    Bumi\n  };\n  return Object.keys(images).flatMap(type => [{\n    id: id++,\n    type,\n    backImg,\n    frontImg: images[type],\n    flipped: false\n  }, {\n    id: id++,\n    type,\n    backImg,\n    frontImg: images[type],\n    flipped: false\n  }]).sort(() => Math.random() - 0.5);\n};\nconst Board = () => {\n  _s();\n  const deck = buildCards(); // Call buildCards here after it's defined\n  const [cards, setCards] = useState(deck);\n  const [checkers, setCheckers] = useState([]);\n  const [completed, setCompleted] = useState([]);\n  const {\n    isShowing,\n    toggle\n  } = useModal();\n  const [isGameCompleted, setIsGameCompleted] = useState(false);\n  const onCardClick = card => () => {\n    if (checkers.length === 0 && !isGameCompleted) {}\n    if (checkersFull(checkers) || cardAlreadyInCheckers(checkers, card)) return;\n    const newCheckers = [...checkers, card];\n    setCheckers(newCheckers);\n    if (validateCheckers(newCheckers)) {\n      setCompleted(prev => [...prev, newCheckers[0].type]);\n    }\n    if (checkersFull(newCheckers)) {\n      resetCheckersAfter(1000);\n    }\n    if (completed.length === 12 && !isGameCompleted) {\n      setIsGameCompleted(true);\n      toggle(); // Show the modal when the game is completed\n    }\n  };\n  const resetCheckersAfter = time => {\n    setTimeout(() => {\n      setCheckers([]);\n    }, time);\n  };\n  const validateCheckers = checkers => {\n    return checkers.length === 2 && checkers[0].type === checkers[1].type;\n  };\n  const cardAlreadyInCheckers = (checkers, card) => {\n    return checkers.length === 1 && checkers[0].id === card.id;\n  };\n  const checkersFull = checkers => {\n    return checkers.length === 2;\n  };\n  useEffect(() => {\n    setCards(cards => cards.map(card => ({\n      ...card,\n      flipped: checkers.some(c => c.id === card.id) || completed.includes(card.type)\n    })));\n  }, [checkers, completed]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Board\",\n      children: cards.map(card => /*#__PURE__*/_createElement(Card, {\n        ...card,\n        onClick: onCardClick(card),\n        key: card.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }\n      }))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isShowing: isShowing,\n      hide: toggle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Board, \"y5B6M3HaVYWnzWzDZJ7ZcLMEv/M=\", false, function () {\n  return [useModal];\n});\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","useEffect","createElement","_createElement","Card","Modal","useModal","Appa","Katara","PrinceZuko","Sokka","Toph","Aang","backImg","Iroh_smiling","Mai","momo","Tylee","Azulaa","Bumi","jsxDEV","_jsxDEV","Fragment","_Fragment","buildCards","id","images","Object","keys","flatMap","type","frontImg","flipped","sort","Math","random","Board","_s","deck","cards","setCards","checkers","setCheckers","completed","setCompleted","isShowing","toggle","isGameCompleted","setIsGameCompleted","onCardClick","card","length","checkersFull","cardAlreadyInCheckers","newCheckers","validateCheckers","prev","resetCheckersAfter","time","setTimeout","map","some","c","includes","children","className","onClick","key","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","hide","_c","$RefreshReg$"],"sources":["/Users/darnycya/Desktop/Projects/Avatar-The-Last-Airbender-Memory-Game/src/Components/Board/Board.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Card from '../Card/Card';\nimport Modal from '../Modal/Modal';\nimport useModal from '../Modal/useModal';\nimport './Board.css';\nimport Appa from '../../Assets/Images/Appa.png';\nimport Katara from '../../Assets/Images/Katara.jpeg';\nimport PrinceZuko from '../../Assets/Images/Prince_Zuko.jpg';\nimport Sokka from '../../Assets/Images/Sokka.png';\nimport Toph from '../../Assets/Images/Toph.jpg';\nimport Aang from '../../Assets/Images/Aang.jpg';\nimport backImg from '../../Assets/Images/Logo.jpg';\nimport Iroh_smiling from '../../Assets/Images/Iroh_smiling.png';\nimport Mai from '../../Assets/Images/Mai.png';\nimport momo from '../../Assets/Images/momo.jpg';\nimport Tylee from '../../Assets/Images/Tylee.png';\nimport Azulaa from '../../Assets/Images/Azulaa.png';\nimport Bumi from '../../Assets/Images/Bumi.jpeg';\n\n// Function to build the cards\nconst buildCards = () => {\n  let id = 0;\n  const images = { Aang, Appa, Katara, PrinceZuko, Sokka, Toph, Iroh_smiling, Mai, momo, Tylee, Azulaa, Bumi };\n  return Object.keys(images)\n    .flatMap((type) => [\n      { id: id++, type, backImg, frontImg: images[type], flipped: false },\n      { id: id++, type, backImg, frontImg: images[type], flipped: false },\n    ])\n    .sort(() => Math.random() - 0.5);\n};\n\nconst Board = () => {\n  const deck = buildCards(); // Call buildCards here after it's defined\n  const [cards, setCards] = useState(deck);\n  const [checkers, setCheckers] = useState([]);\n  const [completed, setCompleted] = useState([]);\n  const { isShowing, toggle } = useModal();\n  const [isGameCompleted, setIsGameCompleted] = useState(false);\n\n  const onCardClick = (card) => () => {\n    if (checkers.length === 0 && !isGameCompleted) {\n    }\n\n    if (checkersFull(checkers) || cardAlreadyInCheckers(checkers, card)) return;\n\n    const newCheckers = [...checkers, card];\n    setCheckers(newCheckers);\n\n    if (validateCheckers(newCheckers)) {\n      setCompleted((prev) => [...prev, newCheckers[0].type]);\n    }\n\n    if (checkersFull(newCheckers)) {\n      resetCheckersAfter(1000);\n    }\n\n    if (completed.length === 12 && !isGameCompleted) {\n      setIsGameCompleted(true);\n      toggle(); // Show the modal when the game is completed\n    }\n  };\n\n  const resetCheckersAfter = (time) => {\n    setTimeout(() => {\n      setCheckers([]);\n    }, time);\n  };\n\n  const validateCheckers = (checkers) => {\n    return checkers.length === 2 && checkers[0].type === checkers[1].type;\n  };\n\n  const cardAlreadyInCheckers = (checkers, card) => {\n    return checkers.length === 1 && checkers[0].id === card.id;\n  };\n\n  const checkersFull = (checkers) => {\n    return checkers.length === 2;\n  };\n\n  useEffect(() => {\n    setCards((cards) =>\n      cards.map((card) => ({\n        ...card,\n        flipped: checkers.some((c) => c.id === card.id) || completed.includes(card.type),\n      }))\n    );\n  }, [checkers, completed]);\n\n  return (\n    <>\n      <div className=\"Board\">\n        {cards.map((card) => (\n          <Card {...card} onClick={onCardClick(card)} key={card.id} />\n        ))}\n      </div>\n      <Modal isShowing={isShowing} hide={toggle} />\n    </>\n  );\n};\n\nexport default Board;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}