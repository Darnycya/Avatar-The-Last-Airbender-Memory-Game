{"ast":null,"code":"var _jsxFileName = \"/Users/darnycya/Desktop/Projects/Avatar-The-Last-Airbender-Memory-Game/src/Components/Board/Board.js\";\nimport React, { useState, useEffect } from 'react';\nimport Card from '../Card/Card';\nimport './Board.css';\nimport MyTimer from '../MyTimer/MyStopwatch';\nimport Modal from '../Modal/Modal';\n\nconst Board = props => {\n  const [cards, setCards] = useState(props.cards);\n  const [checkers, setCheckers] = useState([]);\n  const [completed, setCompleted] = useState([]);\n  const [show, setShow] = useState(false);\n\n  function showModal() {\n    setShow(!show);\n  }\n\n  const onCardClick = card => () => {\n    if (checkersFull(checkers) || cardAlreadyInCheckers(checkers, card)) return;\n    const newCheckers = [...checkers, card];\n    setCheckers(newCheckers);\n    const cardsInCheckersMatched = validateCheckers(newCheckers);\n\n    if (cardsInCheckersMatched) {\n      setCompleted([...completed, newCheckers[0].type]);\n    }\n\n    if (checkersFull(newCheckers)) {\n      resetCheckersAfter(1000);\n    }\n\n    if (completed.length > 10) {\n      resetCompletedAfter(4000);\n      showModal();\n    }\n\n    console.log(completed);\n\n    function resetCompletedAfter(time) {\n      setTimeout(() => {\n        setCompleted([]);\n      }, time);\n    }\n\n    function validateCheckers(checkers) {\n      return checkers.length === 2 && checkers[0].type === checkers[1].type;\n    }\n\n    function cardAlreadyInCheckers(checkers, card) {\n      return checkers.length === 1 && checkers[0].id === card.id;\n    }\n\n    function checkersFull(checkers) {\n      return checkers.length === 2;\n    }\n\n    function resetCheckersAfter(time) {\n      setTimeout(() => {\n        setCheckers([]);\n      }, time);\n    }\n  };\n\n  useEffect(() => {\n    const newCards = cards.map(card => ({ ...card,\n      flipped: checkers.find(c => c.id === card.id) || completed.includes(card.type)\n    }));\n    setCards(newCards);\n  }, [checkers, completed]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MyTimer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, cards.map(card => /*#__PURE__*/React.createElement(Card, Object.assign({}, card, {\n    onClick: onCardClick(card),\n    key: card.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  })))), /*#__PURE__*/React.createElement(\"button\", {\n    class: \"toggle-button\",\n    id: \"centered-toggle-button\",\n    onClick: showModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, \"  \", /*#__PURE__*/React.createElement(\"p\", {\n    className: \"X\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 14\n    }\n  }, \"X\"), \" \"), /*#__PURE__*/React.createElement(Modal, {\n    onClose: show,\n    show: showModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"https://res.cloudinary.com/darnycya/image/upload/v1612424104/Dak_ynbhmz.png\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 15\n    }\n  }))));\n};\n\nexport default Board;","map":{"version":3,"sources":["/Users/darnycya/Desktop/Projects/Avatar-The-Last-Airbender-Memory-Game/src/Components/Board/Board.js"],"names":["React","useState","useEffect","Card","MyTimer","Modal","Board","props","cards","setCards","checkers","setCheckers","completed","setCompleted","show","setShow","showModal","onCardClick","card","checkersFull","cardAlreadyInCheckers","newCheckers","cardsInCheckersMatched","validateCheckers","type","resetCheckersAfter","length","resetCompletedAfter","console","log","time","setTimeout","id","newCards","map","flipped","find","c","includes"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Card from '../Card/Card';\nimport './Board.css';\nimport MyTimer from '../MyTimer/MyStopwatch';\nimport Modal from '../Modal/Modal'\n\nconst Board = props => {\n  const [cards, setCards] = useState(props.cards)\n  const [checkers, setCheckers] = useState([])\n  const [completed, setCompleted] = useState([])\n  const [show,setShow] = useState(false)\n\n  function showModal() {\n  setShow(!show)\n}\n\n  const onCardClick = card => () => {\n    if (checkersFull(checkers) || cardAlreadyInCheckers(checkers, card))\n      return\n    const newCheckers = [...checkers, card]\n    setCheckers(newCheckers)\n    const cardsInCheckersMatched = validateCheckers(newCheckers)\n    \n    if (cardsInCheckersMatched) {\n      setCompleted([...completed, newCheckers[0].type])\n      \n    }\n\n    if (checkersFull(newCheckers)) {\n      resetCheckersAfter(1000)\n    }\n\n    if (completed.length > 10) {\n      resetCompletedAfter(4000)\n      showModal();\n    }\n\n console.log(completed)\n\n    function resetCompletedAfter(time) {\n      setTimeout(() => {\n     setCompleted([])\n   }, time)\n }\n\n    function validateCheckers(checkers){\n      return checkers.length === 2 &&\n      checkers[0].type === checkers[1].type\n    }\n\n    function cardAlreadyInCheckers(checkers, card){\n      return checkers.length === 1 && checkers[0].id === card.id\n    }\n\n    function checkersFull(checkers){\n      return checkers.length === 2\n    }\n\n    function resetCheckersAfter(time) {\n      setTimeout(() => {\n        setCheckers([])\n      }, time)\n    }\n  }\n\n  \n\n  useEffect(() => {\n    const newCards = cards.map(card => ({\n      ...card,\n      flipped:\n        checkers.find(c => c.id === card.id) ||\n        completed.includes(card.type),\n    }))\n    setCards(newCards)\n  }, [checkers, completed])\n\n  \n \n\n\n  return (\n    <>\n      <MyTimer />\n      \n    <div className=\"Board\">\n      {cards.map(card => (\n        <Card {...card} onClick={onCardClick(card)} key={card.id} />\n      ))}\n      </div>\n\n      \n\n\n      <button\n            \n            class=\"toggle-button\"\n            id=\"centered-toggle-button\"\n            onClick={showModal}\n          >  <p className=\"X\">X</p> </button>\n\n              \n          <Modal\n            onClose={show}\n            show={showModal}>\n            \n\n          <div className=\"image\">\n              <img src=\"https://res.cloudinary.com/darnycya/image/upload/v1612424104/Dak_ynbhmz.png\"></img></div>\n            \n            \n          </Modal>\n\n\n      </>\n  )\n}\n\nexport default Board"]},"metadata":{},"sourceType":"module"}